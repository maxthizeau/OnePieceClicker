import type { NextPage } from "next"
import Head from "next/head"
import { Container } from "../components/styled/Globals"
import styled from "styled-components"
import "antd/dist/antd.css"
import { Table } from "antd"
import { getThumbImageSrc, intWithSpaces } from "../lib/clickerFunctions"
import { TUnit } from "../lib/types"
import { useState } from "react"
const dataSource: TUnit[] = require("../lib/data/units.json")

const ButtonStyled = styled.a`
  display: inline-block;
  padding: 5px 10px;
  background: white;
  margin: 5px;

  &.active {
    background: #3b7458;
    color: white;
  }
`

const columns = [
  {
    title: "#",
    dataIndex: "id",
    key: "id",
  },
  { title: "IMG", dataIndex: "img", key: "img", render: (text: any, record: any) => <img style={{ width: "40px" }} src={getThumbImageSrc(record.id)} /> },
  {
    title: "name",
    dataIndex: "name",
    key: "name",
  },
  {
    title: "zone",
    dataIndex: "zone",
    key: "zone",
    sorter: (a: TUnit, b: TUnit) => a.zone - b.zone,
  },
  {
    title: "Rarity",
    dataIndex: "stars",
    key: "stars",
    sorter: (a: TUnit, b: TUnit) => a.stars - b.stars,
    filters: [
      {
        text: "1 Stars",
        value: 1,
      },
      {
        text: "2 Stars",
        value: 2,
      },
      {
        text: "3 Stars",
        value: 3,
      },
      {
        text: "4 Stars",
        value: 4,
      },
      {
        text: "5 Stars",
        value: 5,
      },
      {
        text: "6 Stars",
        value: 6,
      },
    ],
    onFilter: (value: any, record: any) => record.stars === value,
  },
  {
    title: "ClickerMaxHP",
    dataIndex: "clickerMaxHP",
    key: "clickerMaxHP",
    sorter: (a: TUnit, b: TUnit) => a.clickerMaxHP - b.clickerMaxHP,
    render: (text: string, record: TUnit) => intWithSpaces(record.clickerMaxHP),
  },
]

// "id": "0006",
// "name": "Roronoa Zoro - Three Thousand Worlds",
// "stars": 4,
// "cost": 7,
// "combo": 6,
// "slots": 2,
// "maxLvl": 35,
// "XPMax": 136167,
// "HPLvl1": 426,
// "ATKLvl1": 222,
// "RCVLvl1": 37,
// "HPLvlMax": 899,
// "ATKLvlMax": 515,
// "RCVLvlMax": 120,
// "clickerMaxHP": 761453

const UnitTablePage: NextPage = () => {
  const [zone, setZone] = useState(0)

  const data = dataSource.filter((value) => value.zone === zone)
  return (
    <Container>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />

        <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet" />
      </Head>
      <div>
        <h3>Select zone...</h3>
        {[...Array(30)].map((x, index) => (
          <ButtonStyled
            key={index}
            className={zone === index ? "active" : ""}
            onClick={() => {
              setZone(index)
            }}
          >
            {index}
          </ButtonStyled>
        ))}
      </div>
      <h2 style={{ color: "white" }}>
        Zone #{zone} - Total : {data.length}
      </h2>
      <Table style={{ fontFamily: "arial" }} dataSource={data} columns={columns} pagination={{ pageSize: 50 }} />;
    </Container>
  )
}

export default UnitTablePage
